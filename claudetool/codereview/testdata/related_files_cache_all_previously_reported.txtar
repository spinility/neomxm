Tests related files caching when all related files have been previously reported

-- a.go --
package main

func a() {}

-- b.go --
package main

func b() {}

-- c.go --
package main

func c() {}

-- d.go --
package main

func d() {}

-- .commit --
Create initial commit

-- a.go --
package main

func a() {
    // Update 1
}

-- b.go --
package main

func b() {
    // Update 1
}

-- .commit --
Update a.go and b.go together

-- a.go --
package main

func a() {
    // Update 2
}

-- c.go --
package main

func c() {
    // Update 1
}

-- .commit --
Update a.go and c.go together

-- a.go --
package main

func a() {
    // Update 3 - first time, will report b.go and c.go
}

-- .commit --
First code review - reports related files

-- .run_test --
# Info

Potentially related files:

- d.go (38%)

These files have historically changed with the files you have modified. Consider whether they require updates as well.


-- b.go --
package main

func b() {
    // Update 2 - different changeset, but b.go was already reported
}

-- c.go --
package main

func c() {
    // Update 2 - different changeset, but c.go was already reported
}

-- .commit --
Different changeset, but all related files already reported

-- .run_test --
OK
